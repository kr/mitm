// Code generated by go-bindata.
// sources:
// cert.pem
// key.pem
// DO NOT EDIT!

package mitm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _certPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x92\x4f\x93\x9a\x4c\x10\xc6\xef\x7c\x8a\xf7\x6e\xbd\xa5\x20\x24\x7a\xd8\x43\xf7\x30\xe0\x88\x8c\x0e\x3b\xfc\xdb\xdb\x4a\x8d\xa3\x80\x6b\x40\x77\x87\xf0\xe9\xe3\x9a\xad\xe4\x90\x3e\x75\xfd\x9e\xae\xae\x7e\xba\x9e\xff\x3f\x0b\x69\xc8\xf8\x7f\x84\x26\x92\x05\x8c\x80\xa4\x0f\x6a\xc5\x8c\xa1\xaa\x09\x81\x64\xa2\xc1\x30\x04\xcd\x12\x58\xbf\x7f\x30\x75\xa3\xa9\x57\xf7\x17\xbe\x31\xea\x3a\xca\x42\x80\x21\xba\x64\xd1\xe5\x85\x8d\xf5\x8c\xde\x67\x0d\xad\xa9\xb0\x62\x70\x43\xb0\x53\x4a\x8e\xf1\x4a\xe4\xfc\xf6\xf2\x8c\xfe\x7e\x04\x15\x98\xd9\xc0\x25\x38\xb1\xdf\x0c\x5b\xc9\x0c\x97\xc1\xeb\x83\xd5\x9f\x4c\xff\x61\x56\x8c\x6c\xa0\x3e\x6c\x51\xf3\x0c\xe1\x22\x71\x16\xd4\xfb\x3c\xd5\xc2\x59\x98\x5c\x82\x44\x5d\x75\xc7\xa6\xde\xee\x04\x43\xd4\xfa\xab\x8f\x11\x0d\x27\x00\xc9\x4f\x8b\x0d\x67\x2f\xe9\x76\x65\x53\x40\xc4\x26\xee\x8f\x79\xa6\x28\x9a\xa9\x28\xaa\x77\x67\xd9\x1d\x23\xa5\xa7\xc6\x35\xf5\xf2\xbb\x97\x38\xf3\x6f\xf3\xac\xf4\x76\x83\xdd\xcf\xa3\x8e\xf4\xe2\xea\x84\x9e\x75\x66\xc5\xe8\xaa\xc6\xcb\x8b\xa9\x3d\x2e\x33\x7b\x86\x3d\x5e\xec\xd2\x64\x5f\x57\xad\xc4\x02\xe1\xb0\xa0\x08\x31\x81\x4e\x18\x6a\x4a\x3f\x4b\x66\x2d\x82\x79\xfc\xc4\x8a\x4c\x89\x28\xd2\x15\xdc\x25\xff\xb7\x28\x41\xac\xa6\x08\xa9\xb9\x33\x9c\x8e\x50\x3d\x16\x25\x94\x06\x77\x4b\x5a\xdf\x5a\x15\x06\xb7\x2a\x1c\xda\xcd\x99\x7f\x58\xfb\xb2\xa2\x07\x03\x00\x12\xa2\xbf\x1e\x85\x0f\x9a\xaf\xc1\xc7\x10\x4e\x14\x7a\x7f\xc3\x03\x91\x1e\xd2\x6e\x73\xd8\xda\x92\xec\xc5\x64\xdf\xb9\xea\xad\x59\x13\xc7\x3a\x2d\xf4\xb5\x28\x65\xaf\x7d\x2f\x2d\xd7\x2e\x61\xc2\x47\xaa\x36\x19\x23\x97\x21\xac\x5b\xde\x48\xcf\x7e\x3e\xe5\x59\xa5\x64\x7e\x1d\x61\xa4\x75\xfb\xc6\x9c\xf6\x75\x4c\x89\x52\xf0\xf4\x64\x3d\xd2\x40\xb9\xff\x6f\x42\x7e\x05\x00\x00\xff\xff\xbb\xc0\x85\xc9\x3e\x02\x00\x00")

func certPemBytes() ([]byte, error) {
	return bindataRead(
		_certPem,
		"cert.pem",
	)
}

func certPem() (*asset, error) {
	bytes, err := certPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cert.pem", size: 574, mode: os.FileMode(420), modTime: time.Unix(1433877651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _keyPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xbd\x6e\x83\x30\x18\x00\x77\x9e\x82\x1d\x55\x40\x53\xb5\x30\x64\xf8\x70\x3e\x8c\x13\xcc\x4f\xf9\x49\x60\x43\x36\x4a\x68\xaa\x1a\xab\x50\x37\x6f\x5f\x35\x73\x6e\xbd\xe5\xee\xe9\x9f\x08\x29\xcb\x6c\x24\x76\xf1\xce\x5a\xa8\xd1\x3e\x60\x77\x17\x16\x4f\x04\x81\x12\x91\xa5\x15\x1d\x4f\x26\xf6\x8f\xd7\x5f\xff\x3b\x82\xd9\x8b\xc4\x7e\xf3\xda\x5f\x71\xbe\x31\x97\xe6\xa3\xee\x34\x6f\xdf\xe6\xb1\xee\xb8\x02\x45\x09\xd1\xb4\xe2\x2f\xa1\x05\x06\x13\xd5\x94\xbb\xf2\x0c\x28\x26\xde\xaf\xcd\xf0\xf1\xbc\x8f\x0d\x99\x8a\xf5\x20\xfd\xd3\x05\x44\xe1\xc5\x9b\x74\xf9\x19\x54\xf5\xa5\x8a\x20\xe7\xcc\x1d\x9d\x46\x2e\xce\xe2\x1f\xf3\xda\x0a\xe4\x10\xde\xf4\x59\x7b\x69\x76\x59\xfb\x29\x0e\x9c\x64\xce\xdb\x4f\x37\x14\x6e\x2b\x25\x0c\xa6\xdc\x6e\xad\x7b\x2c\x66\xbb\x87\x0f\x7f\x01\x00\x00\xff\xff\x3d\x7d\x75\xfb\xe3\x00\x00\x00")

func keyPemBytes() ([]byte, error) {
	return bindataRead(
		_keyPem,
		"key.pem",
	)
}

func keyPem() (*asset, error) {
	bytes, err := keyPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "key.pem", size: 227, mode: os.FileMode(384), modTime: time.Unix(1433877651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cert.pem": certPem,
	"key.pem":  keyPem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cert.pem": &bintree{certPem, map[string]*bintree{}},
	"key.pem":  &bintree{keyPem, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, path.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
